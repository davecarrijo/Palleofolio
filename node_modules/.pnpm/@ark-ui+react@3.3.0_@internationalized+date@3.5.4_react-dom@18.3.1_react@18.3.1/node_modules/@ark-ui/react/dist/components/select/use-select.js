'use client';
import { useMachine, normalizeProps } from '@zag-js/react';
import * as select from '@zag-js/select';
import { useMemo, useId } from 'react';
import { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';
import { useLocaleContext } from '../../providers/locale/use-locale-context.js';
import { createSplitProps } from '../../utils/create-split-props.js';
import { useEvent } from '../../utils/use-event.js';

const useSelect = (props) => {
  const [collectionOptions, selectProps] = createSplitProps()(props, [
    "isItemDisabled",
    "itemToValue",
    "itemToString",
    "items"
  ]);
  const collection = useMemo(
    () => select.collection(collectionOptions),
    Object.values(collectionOptions)
  );
  const { getRootNode } = useEnvironmentContext();
  const { dir } = useLocaleContext();
  const initialContext = {
    id: useId(),
    dir,
    getRootNode,
    collection,
    open: props.defaultOpen,
    value: props.defaultValue,
    "open.controlled": props.open !== void 0,
    ...selectProps
  };
  const context = {
    ...initialContext,
    collection,
    value: props.value,
    onValueChange: useEvent(props.onValueChange, { sync: true }),
    onHighlightChange: useEvent(props.onHighlightChange),
    onOpenChange: useEvent(props.onOpenChange)
  };
  const [state, send] = useMachine(select.machine(initialContext), {
    context
  });
  return select.connect(state, send, normalizeProps);
};

export { useSelect };
